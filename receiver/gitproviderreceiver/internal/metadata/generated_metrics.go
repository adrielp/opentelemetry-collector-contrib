// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
	conventions "go.opentelemetry.io/collector/semconv/v1.25.0"
)

// AttributePullRequestState specifies the a value pull_request.state attribute.
type AttributePullRequestState int

const (
	_ AttributePullRequestState = iota
	AttributePullRequestStateOpen
	AttributePullRequestStateMerged
)

// String returns the string representation of the AttributePullRequestState.
func (av AttributePullRequestState) String() string {
	switch av {
	case AttributePullRequestStateOpen:
		return "open"
	case AttributePullRequestStateMerged:
		return "merged"
	}
	return ""
}

// MapAttributePullRequestState is a helper map of string to AttributePullRequestState attribute value.
var MapAttributePullRequestState = map[string]AttributePullRequestState{
	"open":   AttributePullRequestStateOpen,
	"merged": AttributePullRequestStateMerged,
}

type metricVcsRepositoryBranchCommitAheadbyCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.commit.aheadby.count metric with initial data.
func (m *metricVcsRepositoryBranchCommitAheadbyCount) init() {
	m.data.SetName("vcs.repository.branch.commit.aheadby.count")
	m.data.SetDescription("The number of commits a branch is ahead of the default branch (trunk).")
	m.data.SetUnit("{commit}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchCommitAheadbyCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchCommitAheadbyCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchCommitAheadbyCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchCommitAheadbyCount(cfg MetricConfig) metricVcsRepositoryBranchCommitAheadbyCount {
	m := metricVcsRepositoryBranchCommitAheadbyCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryBranchCommitBehindbyCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.commit.behindby.count metric with initial data.
func (m *metricVcsRepositoryBranchCommitBehindbyCount) init() {
	m.data.SetName("vcs.repository.branch.commit.behindby.count")
	m.data.SetDescription("The number of commits a branch is behind the default branch (trunk).")
	m.data.SetUnit("{commit}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchCommitBehindbyCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchCommitBehindbyCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchCommitBehindbyCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchCommitBehindbyCount(cfg MetricConfig) metricVcsRepositoryBranchCommitBehindbyCount {
	m := metricVcsRepositoryBranchCommitBehindbyCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryBranchCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.count metric with initial data.
func (m *metricVcsRepositoryBranchCount) init() {
	m.data.SetName("vcs.repository.branch.count")
	m.data.SetDescription("The number of branches in a repository.")
	m.data.SetUnit("{branch}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchCount(cfg MetricConfig) metricVcsRepositoryBranchCount {
	m := metricVcsRepositoryBranchCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryBranchLineAdditionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.line.addition.count metric with initial data.
func (m *metricVcsRepositoryBranchLineAdditionCount) init() {
	m.data.SetName("vcs.repository.branch.line.addition.count")
	m.data.SetDescription("The number of lines added in a branch relative to the default branch (trunk).")
	m.data.SetUnit("{line}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchLineAdditionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchLineAdditionCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchLineAdditionCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchLineAdditionCount(cfg MetricConfig) metricVcsRepositoryBranchLineAdditionCount {
	m := metricVcsRepositoryBranchLineAdditionCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryBranchLineDeletionCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.line.deletion.count metric with initial data.
func (m *metricVcsRepositoryBranchLineDeletionCount) init() {
	m.data.SetName("vcs.repository.branch.line.deletion.count")
	m.data.SetDescription("The number of lines deleted in a branch relative to the default branch (trunk).")
	m.data.SetUnit("{line}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchLineDeletionCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchLineDeletionCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchLineDeletionCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchLineDeletionCount(cfg MetricConfig) metricVcsRepositoryBranchLineDeletionCount {
	m := metricVcsRepositoryBranchLineDeletionCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryBranchTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.branch.time metric with initial data.
func (m *metricVcsRepositoryBranchTime) init() {
	m.data.SetName("vcs.repository.branch.time")
	m.data.SetDescription("Time a branch created from the default branch (trunk) has existed.")
	m.data.SetUnit("s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryBranchTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryBranchTime) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryBranchTime) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryBranchTime(cfg MetricConfig) metricVcsRepositoryBranchTime {
	m := metricVcsRepositoryBranchTime{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryContributorCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.contributor.count metric with initial data.
func (m *metricVcsRepositoryContributorCount) init() {
	m.data.SetName("vcs.repository.contributor.count")
	m.data.SetDescription("The number of unique contributors to a repository.")
	m.data.SetUnit("{contributor}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryContributorCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryContributorCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryContributorCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryContributorCount(cfg MetricConfig) metricVcsRepositoryContributorCount {
	m := metricVcsRepositoryContributorCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.count metric with initial data.
func (m *metricVcsRepositoryCount) init() {
	m.data.SetName("vcs.repository.count")
	m.data.SetDescription("The number of repositories in an organization.")
	m.data.SetUnit("{repository}")
	m.data.SetEmptyGauge()
}

func (m *metricVcsRepositoryCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryCount(cfg MetricConfig) metricVcsRepositoryCount {
	m := metricVcsRepositoryCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryPullRequestCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.pull_request.count metric with initial data.
func (m *metricVcsRepositoryPullRequestCount) init() {
	m.data.SetName("vcs.repository.pull_request.count")
	m.data.SetDescription("The number of pull requests in a repository, categorized by their state (either open or merged).")
	m.data.SetUnit("{pull_request}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryPullRequestCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, pullRequestStateAttributeValue string, repositoryNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("pull_request.state", pullRequestStateAttributeValue)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryPullRequestCount) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryPullRequestCount) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryPullRequestCount(cfg MetricConfig) metricVcsRepositoryPullRequestCount {
	m := metricVcsRepositoryPullRequestCount{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryPullRequestTimeOpen struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.pull_request.time_open metric with initial data.
func (m *metricVcsRepositoryPullRequestTimeOpen) init() {
	m.data.SetName("vcs.repository.pull_request.time_open")
	m.data.SetDescription("The amount of time a pull request has been open.")
	m.data.SetUnit("s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryPullRequestTimeOpen) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryPullRequestTimeOpen) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryPullRequestTimeOpen) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryPullRequestTimeOpen(cfg MetricConfig) metricVcsRepositoryPullRequestTimeOpen {
	m := metricVcsRepositoryPullRequestTimeOpen{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryPullRequestTimeToApproval struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.pull_request.time_to_approval metric with initial data.
func (m *metricVcsRepositoryPullRequestTimeToApproval) init() {
	m.data.SetName("vcs.repository.pull_request.time_to_approval")
	m.data.SetDescription("The amount of time it took a pull request to go from open to approved.")
	m.data.SetUnit("s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryPullRequestTimeToApproval) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryPullRequestTimeToApproval) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryPullRequestTimeToApproval) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryPullRequestTimeToApproval(cfg MetricConfig) metricVcsRepositoryPullRequestTimeToApproval {
	m := metricVcsRepositoryPullRequestTimeToApproval{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVcsRepositoryPullRequestTimeToMerge struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vcs.repository.pull_request.time_to_merge metric with initial data.
func (m *metricVcsRepositoryPullRequestTimeToMerge) init() {
	m.data.SetName("vcs.repository.pull_request.time_to_merge")
	m.data.SetDescription("The amount of time it took a pull request to go from open to merged.")
	m.data.SetUnit("s")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVcsRepositoryPullRequestTimeToMerge) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("repository.name", repositoryNameAttributeValue)
	dp.Attributes().PutStr("branch.name", branchNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVcsRepositoryPullRequestTimeToMerge) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVcsRepositoryPullRequestTimeToMerge) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVcsRepositoryPullRequestTimeToMerge(cfg MetricConfig) metricVcsRepositoryPullRequestTimeToMerge {
	m := metricVcsRepositoryPullRequestTimeToMerge{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                                       MetricsBuilderConfig // config of the metrics builder.
	startTime                                    pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                              int                  // maximum observed number of metrics per resource.
	metricsBuffer                                pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                                    component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter               map[string]filter.Filter
	resourceAttributeExcludeFilter               map[string]filter.Filter
	metricVcsRepositoryBranchCommitAheadbyCount  metricVcsRepositoryBranchCommitAheadbyCount
	metricVcsRepositoryBranchCommitBehindbyCount metricVcsRepositoryBranchCommitBehindbyCount
	metricVcsRepositoryBranchCount               metricVcsRepositoryBranchCount
	metricVcsRepositoryBranchLineAdditionCount   metricVcsRepositoryBranchLineAdditionCount
	metricVcsRepositoryBranchLineDeletionCount   metricVcsRepositoryBranchLineDeletionCount
	metricVcsRepositoryBranchTime                metricVcsRepositoryBranchTime
	metricVcsRepositoryContributorCount          metricVcsRepositoryContributorCount
	metricVcsRepositoryCount                     metricVcsRepositoryCount
	metricVcsRepositoryPullRequestCount          metricVcsRepositoryPullRequestCount
	metricVcsRepositoryPullRequestTimeOpen       metricVcsRepositoryPullRequestTimeOpen
	metricVcsRepositoryPullRequestTimeToApproval metricVcsRepositoryPullRequestTimeToApproval
	metricVcsRepositoryPullRequestTimeToMerge    metricVcsRepositoryPullRequestTimeToMerge
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:        mbc,
		startTime:     pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer: pmetric.NewMetrics(),
		buildInfo:     settings.BuildInfo,
		metricVcsRepositoryBranchCommitAheadbyCount:  newMetricVcsRepositoryBranchCommitAheadbyCount(mbc.Metrics.VcsRepositoryBranchCommitAheadbyCount),
		metricVcsRepositoryBranchCommitBehindbyCount: newMetricVcsRepositoryBranchCommitBehindbyCount(mbc.Metrics.VcsRepositoryBranchCommitBehindbyCount),
		metricVcsRepositoryBranchCount:               newMetricVcsRepositoryBranchCount(mbc.Metrics.VcsRepositoryBranchCount),
		metricVcsRepositoryBranchLineAdditionCount:   newMetricVcsRepositoryBranchLineAdditionCount(mbc.Metrics.VcsRepositoryBranchLineAdditionCount),
		metricVcsRepositoryBranchLineDeletionCount:   newMetricVcsRepositoryBranchLineDeletionCount(mbc.Metrics.VcsRepositoryBranchLineDeletionCount),
		metricVcsRepositoryBranchTime:                newMetricVcsRepositoryBranchTime(mbc.Metrics.VcsRepositoryBranchTime),
		metricVcsRepositoryContributorCount:          newMetricVcsRepositoryContributorCount(mbc.Metrics.VcsRepositoryContributorCount),
		metricVcsRepositoryCount:                     newMetricVcsRepositoryCount(mbc.Metrics.VcsRepositoryCount),
		metricVcsRepositoryPullRequestCount:          newMetricVcsRepositoryPullRequestCount(mbc.Metrics.VcsRepositoryPullRequestCount),
		metricVcsRepositoryPullRequestTimeOpen:       newMetricVcsRepositoryPullRequestTimeOpen(mbc.Metrics.VcsRepositoryPullRequestTimeOpen),
		metricVcsRepositoryPullRequestTimeToApproval: newMetricVcsRepositoryPullRequestTimeToApproval(mbc.Metrics.VcsRepositoryPullRequestTimeToApproval),
		metricVcsRepositoryPullRequestTimeToMerge:    newMetricVcsRepositoryPullRequestTimeToMerge(mbc.Metrics.VcsRepositoryPullRequestTimeToMerge),
		resourceAttributeIncludeFilter:               make(map[string]filter.Filter),
		resourceAttributeExcludeFilter:               make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.OrganizationName.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["organization.name"] = filter.CreateFilter(mbc.ResourceAttributes.OrganizationName.MetricsInclude)
	}
	if mbc.ResourceAttributes.OrganizationName.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["organization.name"] = filter.CreateFilter(mbc.ResourceAttributes.OrganizationName.MetricsExclude)
	}
	if mbc.ResourceAttributes.VcsVendorName.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["vcs.vendor.name"] = filter.CreateFilter(mbc.ResourceAttributes.VcsVendorName.MetricsInclude)
	}
	if mbc.ResourceAttributes.VcsVendorName.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["vcs.vendor.name"] = filter.CreateFilter(mbc.ResourceAttributes.VcsVendorName.MetricsExclude)
	}

	for _, op := range options {
		op(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/gitproviderreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricVcsRepositoryBranchCommitAheadbyCount.emit(ils.Metrics())
	mb.metricVcsRepositoryBranchCommitBehindbyCount.emit(ils.Metrics())
	mb.metricVcsRepositoryBranchCount.emit(ils.Metrics())
	mb.metricVcsRepositoryBranchLineAdditionCount.emit(ils.Metrics())
	mb.metricVcsRepositoryBranchLineDeletionCount.emit(ils.Metrics())
	mb.metricVcsRepositoryBranchTime.emit(ils.Metrics())
	mb.metricVcsRepositoryContributorCount.emit(ils.Metrics())
	mb.metricVcsRepositoryCount.emit(ils.Metrics())
	mb.metricVcsRepositoryPullRequestCount.emit(ils.Metrics())
	mb.metricVcsRepositoryPullRequestTimeOpen.emit(ils.Metrics())
	mb.metricVcsRepositoryPullRequestTimeToApproval.emit(ils.Metrics())
	mb.metricVcsRepositoryPullRequestTimeToMerge.emit(ils.Metrics())

	for _, op := range rmo {
		op(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordVcsRepositoryBranchCommitAheadbyCountDataPoint adds a data point to vcs.repository.branch.commit.aheadby.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchCommitAheadbyCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryBranchCommitAheadbyCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryBranchCommitBehindbyCountDataPoint adds a data point to vcs.repository.branch.commit.behindby.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchCommitBehindbyCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryBranchCommitBehindbyCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryBranchCountDataPoint adds a data point to vcs.repository.branch.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string) {
	mb.metricVcsRepositoryBranchCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue)
}

// RecordVcsRepositoryBranchLineAdditionCountDataPoint adds a data point to vcs.repository.branch.line.addition.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchLineAdditionCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryBranchLineAdditionCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryBranchLineDeletionCountDataPoint adds a data point to vcs.repository.branch.line.deletion.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchLineDeletionCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryBranchLineDeletionCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryBranchTimeDataPoint adds a data point to vcs.repository.branch.time metric.
func (mb *MetricsBuilder) RecordVcsRepositoryBranchTimeDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryBranchTime.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryContributorCountDataPoint adds a data point to vcs.repository.contributor.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryContributorCountDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string) {
	mb.metricVcsRepositoryContributorCount.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue)
}

// RecordVcsRepositoryCountDataPoint adds a data point to vcs.repository.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryCountDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricVcsRepositoryCount.recordDataPoint(mb.startTime, ts, val)
}

// RecordVcsRepositoryPullRequestCountDataPoint adds a data point to vcs.repository.pull_request.count metric.
func (mb *MetricsBuilder) RecordVcsRepositoryPullRequestCountDataPoint(ts pcommon.Timestamp, val int64, pullRequestStateAttributeValue AttributePullRequestState, repositoryNameAttributeValue string) {
	mb.metricVcsRepositoryPullRequestCount.recordDataPoint(mb.startTime, ts, val, pullRequestStateAttributeValue.String(), repositoryNameAttributeValue)
}

// RecordVcsRepositoryPullRequestTimeOpenDataPoint adds a data point to vcs.repository.pull_request.time_open metric.
func (mb *MetricsBuilder) RecordVcsRepositoryPullRequestTimeOpenDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryPullRequestTimeOpen.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryPullRequestTimeToApprovalDataPoint adds a data point to vcs.repository.pull_request.time_to_approval metric.
func (mb *MetricsBuilder) RecordVcsRepositoryPullRequestTimeToApprovalDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryPullRequestTimeToApproval.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// RecordVcsRepositoryPullRequestTimeToMergeDataPoint adds a data point to vcs.repository.pull_request.time_to_merge metric.
func (mb *MetricsBuilder) RecordVcsRepositoryPullRequestTimeToMergeDataPoint(ts pcommon.Timestamp, val int64, repositoryNameAttributeValue string, branchNameAttributeValue string) {
	mb.metricVcsRepositoryPullRequestTimeToMerge.recordDataPoint(mb.startTime, ts, val, repositoryNameAttributeValue, branchNameAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
